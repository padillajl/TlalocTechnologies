/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : LEDR.h
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Component   : LED
**     Version     : Component 01.063, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2012-12-29, 14:20, # CodeGen: 231
**     Abstract    :
**          This component implements a universal driver for a single LED.
**     Settings    :
**          Component name                                 : LEDR
**          Turned On with initialization                  : no
**          HW Interface                                   : 
**            On/Off                                       : Disabled
**            PWM                                          : Enabled
**              PWM                                        : PWM
**            High Value means ON                          : no
**          Shell                                          : Enabled
**            Shell                                        : FSSH1
**            Utility                                      : UTIL1
**     Contents    :
**         On           - void LEDR_On(void);
**         Off          - void LEDR_Off(void);
**         Neg          - void LEDR_Neg(void);
**         Get          - byte LEDR_Get(void);
**         Put          - void LEDR_Put(byte val);
**         Init         - void LEDR_Init(void);
**         Deinit       - void LEDR_Deinit(void);
**         ParseCommand - byte LEDR_ParseCommand(const unsigned char *cmd, bool *handled, const...
**         SetRatio16   - void LEDR_SetRatio16(word ratio);
**
**     License   :  Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2012, all rights reserved.
**     This an open source software implementing an LED driver using Processor Expert.
**     This is a free software and is opened for education, research and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/

#ifndef __LEDR_H
#define __LEDR_H

/* MODULE LEDR. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited beans */
#include "Inhr3.h"
#include "FSSH1.h"
#include "UTIL1.h"

#include "Cpu.h"

#define LEDR_ClrVal()    Inhr3_SetRatio16(0x0) /* put the pin on low level */
#define LEDR_SetVal()    Inhr3_SetRatio16(0xffff) /* put the pin on high level */
#define LEDR_SetInput()  /* not possible! */ /* use the pin as input pin */
#define LEDR_SetOutput() /* not possible! */ /* use the pin as ouput pin */
extern uint16_t LEDR_currPWM; /* current 16bit PWM value */

#define LEDR_PARSE_COMMAND_ENABLED  1  /* set to 1 if method ParseCommand() is present, 0 otherwise */


#define LEDR_On() LEDR_SetRatio16(0xffff)
/*
** ===================================================================
**     Method      :  LEDR_On (component LED)
**
**     Description :
**         This turns the LED on.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LEDR_Off() LEDR_SetRatio16(0x0)
/*
** ===================================================================
**     Method      :  LEDR_Off (component LED)
**
**     Description :
**         This turns the LED off.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LEDR_Neg() LEDR_SetRatio16(0xffff-LEDR_currPWM)
/*
** ===================================================================
**     Method      :  LEDR_Neg (component LED)
**
**     Description :
**         This negates/toggles the LED
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LEDR_Get() (LEDR_currPWM!=0)
/*
** ===================================================================
**     Method      :  LEDR_Get (component LED)
**
**     Description :
**         This returns logical 1 in case the LED is on, 0 otherwise.
**     Parameters  : None
**     Returns     :
**         ---             - Status of the LED (on or off)
** ===================================================================
*/

#define LEDR_Init() LEDR_Off()
/*
** ===================================================================
**     Method      :  LEDR_Init (component LED)
**
**     Description :
**         Performs the LED driver initialization.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

#define LEDR_Put(val)  ((val) ? LEDR_On() : LEDR_Off())
/*
** ===================================================================
**     Method      :  LEDR_Put (component LED)
**
**     Description :
**         Turns the LED on or off.
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - value to define if the LED has to be on or
**                           off.
**     Returns     : Nothing
** ===================================================================
*/

void LEDR_Deinit(void);
/*
** ===================================================================
**     Method      :  LEDR_Deinit (component LED)
**
**     Description :
**         Deinitializes the driver
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

byte LEDR_ParseCommand(const unsigned char *cmd, bool *handled, const FSSH1_StdIOType *io);
/*
** ===================================================================
**     Method      :  LEDR_ParseCommand (component LED)
**
**     Description :
**         Shell Command Line parser
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmd             - Pointer to command string
**       * handled         - Pointer to variable which tells if
**                           the command has been handled or not
**       * io              - Pointer to I/O structure
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void LEDR_SetRatio16(word ratio);
/*
** ===================================================================
**     Method      :  LEDR_SetRatio16 (component LED)
**
**     Description :
**         Method to specify the duty cylce. If using a PWM pin, this
**         means the duty cycle is set. For On/off pins, values smaller
**         0x7FFF means off, while values greater means on.
**     Parameters  :
**         NAME            - DESCRIPTION
**         ratio           - Ratio value, where 0 means 'off' and
**                           0xffff means 'on'
**     Returns     : Nothing
** ===================================================================
*/

/* END LEDR. */

#endif
/* ifndef __LEDR_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
