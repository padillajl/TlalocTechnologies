/** ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : FSSH1.h
**     Project     : ProcessorExpert
**     Processor   : MKL25Z128VLK4
**     Component   : FSShell
**     Version     : Component 01.226, Driver 01.00, CPU db: 3.00.000
**     Compiler    : GNU C Compiler
**     Date/Time   : 2012-12-29, 12:12, # CodeGen: 227
**     Abstract    :
**
**     Settings    :
**
**     Contents    :
**         PrintPrompt        - void FSSH1_PrintPrompt(FSSH1_ConstStdIOType *io);
**         SendNum8u          - void FSSH1_SendNum8u(byte val, FSSH1_StdIO_OutErr_FctType io);
**         SendNum8s          - void FSSH1_SendNum8s(signed char val, FSSH1_StdIO_OutErr_FctType io);
**         SendNum16u         - void FSSH1_SendNum16u(word val, FSSH1_StdIO_OutErr_FctType io);
**         SendNum16s         - void FSSH1_SendNum16s(int16_t val, FSSH1_StdIO_OutErr_FctType io);
**         SendNum32u         - void FSSH1_SendNum32u(dword val, FSSH1_StdIO_OutErr_FctType io);
**         SendNum32s         - void FSSH1_SendNum32s(long val, FSSH1_StdIO_OutErr_FctType io);
**         SendStr            - void FSSH1_SendStr(const byte *str, FSSH1_StdIO_OutErr_FctType io);
**         Date               - byte FSSH1_Date(const unsigned char *cmd, FSSH1_ConstStdIOType *io);
**         Time               - byte FSSH1_Time(const unsigned char *cmd, FSSH1_ConstStdIOType *io);
**         PrintStatus        - byte FSSH1_PrintStatus(FSSH1_ConstStdIOType *io);
**         ShellCmd           - byte FSSH1_ShellCmd(const unsigned char *cmd, bool *handled,...
**         ReadLine           - bool FSSH1_ReadLine(byte *buf, size_t bufSize, FSSH1_ConstStdIOType *io);
**         PrintCommandFailed - void FSSH1_PrintCommandFailed(const unsigned char *cmd, FSSH1_ConstStdIOType...
**         ParseCommand       - byte FSSH1_ParseCommand(const unsigned char *cmd, FSSH1_ConstStdIOType *io,...
**         GetStdio           - FSSH1_ConstStdIOTypePtr FSSH1_GetStdio(void);
**         ReadAndParseLine   - byte FSSH1_ReadAndParseLine(byte *cmdBuf, size_t cmdBufSize,...
**         RequestSerial      - void FSSH1_RequestSerial(void);
**         ReleaseSerial      - void FSSH1_ReleaseSerial(void);
**         GetSemaphore       - void* FSSH1_GetSemaphore(void);
**         SendStatusStr      - void FSSH1_SendStatusStr(const byte *strItem, const byte *strStatus,...
**         SendHelpStr        - void FSSH1_SendHelpStr(const byte *strCmd, const byte *strHelp,...
**         ReadChar           - void FSSH1_ReadChar(byte *c);
**         SendChar           - void FSSH1_SendChar(byte ch);
**         KeyPressed         - bool FSSH1_KeyPressed(void);
**         Init               - void FSSH1_Init(void);
**         Deinit             - void FSSH1_Deinit(void);
**
**     License   :  Open Source (LGPL)
**     Copyright : (c) Copyright Erich Styger, 2012, all rights reserved.
**     This an open source software implementing a shell using Processor Expert.
**     Main purpose is for a file system, but useful as well without one.
**     This is a free software and is opened for education,  research  and commercial developments under license policy of following terms:
**     * This is a free software and there is NO WARRANTY.
**     * No restriction on use. You can use, modify and redistribute it for personal, non-profit or commercial product UNDER YOUR RESPONSIBILITY.
**     * Redistributions of source code must retain the above copyright notice.
** ###################################################################*/

#include "PE_LDD.h" /* hack for Processor Expert (e.g. in MCU10.3) and LDD: PE_LDD.h includes at the end all shared modules, causing a recursive header file include conflict */

#define FSSH1_FATFS   /* dummy alias to FATFS type */
#define FSSH1_DRESULT /* dummy alias to FATFS type */
#define FSSH1_FRESULT /* dummy alias to FATFS type */

#ifndef __FSSH1_H
#define __FSSH1_H

/* MODULE FSSH1. */

/* Include shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
/* Include inherited components */
#include "UTIL1.h"
#include "AS1.h"
#include "RxBuf3.h"
#include "FRTOS1.h"
#include "TmDt1.h"

#define FSSH1_8_3_SIZE       sizeof("12345678.txt") /* length of a 8.3 file name (13 including the zero byte) */

#include "Cpu.h"
#include <stddef.h> /* for size_t */


#ifndef __BWUserType_FSSH1_StdIO_OutErr_FctType
#define __BWUserType_FSSH1_StdIO_OutErr_FctType
  typedef void (*FSSH1_StdIO_OutErr_FctType)(byte); /* Callback for an output or error I/O function */
#endif
#ifndef __BWUserType_FSSH1_StdIO_In_FctType
#define __BWUserType_FSSH1_StdIO_In_FctType
  typedef void (*FSSH1_StdIO_In_FctType)(byte *); /* Callback for an I/O input function. */
#endif
#ifndef __BWUserType_FSSH1_StdIO_KeyPressed_FctType
#define __BWUserType_FSSH1_StdIO_KeyPressed_FctType
  typedef bool (*FSSH1_StdIO_KeyPressed_FctType)(void); /* Callback which returns true if a key has been pressed */
#endif
#ifndef __BWUserType_FSSH1_StdIOType
#define __BWUserType_FSSH1_StdIOType
  typedef struct {                     /* Record containing input, output and error callback (stdin, stdout, stderr). */
    FSSH1_StdIO_In_FctType stdIn;      /* standard input */
    FSSH1_StdIO_OutErr_FctType stdOut; /* standard output */
    FSSH1_StdIO_OutErr_FctType stdErr; /* standard error */
    FSSH1_StdIO_KeyPressed_FctType keyPressed; /* key pressed callback */
  } FSSH1_StdIOType;
#endif
#ifndef __BWUserType_FSSH1_ConstStdIOType
#define __BWUserType_FSSH1_ConstStdIOType
  typedef const FSSH1_StdIOType FSSH1_ConstStdIOType; /* constant StdIOType */
#endif
#ifndef __BWUserType_FSSH1_ParseCommandCallback
#define __BWUserType_FSSH1_ParseCommandCallback
  typedef byte (*FSSH1_ParseCommandCallback)(const byte *cmd, bool *handled, const FSSH1_StdIOType *io); /* Callback for parsing a shell command */
#endif
#ifndef __BWUserType_FSSH1_ConstStdIOTypePtr
#define __BWUserType_FSSH1_ConstStdIOTypePtr
  typedef const FSSH1_ConstStdIOType *FSSH1_ConstStdIOTypePtr; /* Pointer to constant standard I/O descriptor */
#endif

#define FSSH1_DASH_LINE "--------------------------------------------------------------"
/* predefined commands */
#define FSSH1_CMD_HELP   "help"
#define FSSH1_CMD_STATUS "status"


void FSSH1_SendStr(const byte *str, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendStr (component FSShell)
**
**     Description :
**         Prints a string using an I/O function
**     Parameters  :
**         NAME            - DESCRIPTION
**         str             - String (zero terminated) to be printed.
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

byte FSSH1_ShellCmd(const unsigned char *cmd, bool *handled, FSSH1_ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  FSSH1_ShellCmd (component FSShell)
**
**     Description :
**         Parses a shell command. Use 'help' to get a list of
**         supported commands.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmd             - Pointer to command string
**       * handled         - Pointer to variable to indicate if
**                           the command has been handled. The caller
**                           passes this variable to the command scanner
**                           to find out if the passed command has been
**                           handled. The variable is initialized by the
**                           caller.
**       * io              - Pointer to I/O callbacks
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void FSSH1_SendNum32s(long val, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendNum32s (component FSShell)
**
**     Description :
**         Sends a 32bit signed number to the given I/O
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - number to print
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_SendNum16s(int16_t val, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendNum16s (component FSShell)
**
**     Description :
**         Sends a 16bit signed number to the given I/O
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - number to print
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_PrintPrompt(FSSH1_ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  FSSH1_PrintPrompt (component FSShell)
**
**     Description :
**         Prints the prompt to the stdOut channel
**     Parameters  :
**         NAME            - DESCRIPTION
**       * io              - Pointer to IO to be used
**     Returns     : Nothing
** ===================================================================
*/

bool FSSH1_ReadLine(byte *buf, size_t bufSize, FSSH1_ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  FSSH1_ReadLine (component FSShell)
**
**     Description :
**         Reads a line from stdIn and returns TRUE if we have a line,
**         FALSE otherwise.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * buf             - Pointer to buffer where to read in the
**                           information
**         bufSize         - size of buffer
**       * io              - Pointer to I/O callbacks
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte FSSH1_Date(const unsigned char *cmd, FSSH1_ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  FSSH1_Date (component FSShell)
**
**     Description :
**         Processes the date command
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmd             - Pointer to command string
**       * io              - Pointer to I/O callbacks
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte FSSH1_Time(const unsigned char *cmd, FSSH1_ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  FSSH1_Time (component FSShell)
**
**     Description :
**         Processes the time command
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmd             - Pointer to command string
**       * io              - Pointer to I/O callbacks
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

byte FSSH1_PrintStatus(FSSH1_ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  FSSH1_PrintStatus (component FSShell)
**
**     Description :
**         Prints various available system status information
**     Parameters  :
**         NAME            - DESCRIPTION
**       * io              - Pointer to I/O callbacks
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void FSSH1_PrintCommandFailed(const unsigned char *cmd, FSSH1_ConstStdIOType *io);
/*
** ===================================================================
**     Method      :  FSSH1_PrintCommandFailed (component FSShell)
**
**     Description :
**         Prints a standard message for failed or unknown commands
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmd             - Pointer to command which was failing
**       * io              - Pointer to I/O callbacks
**     Returns     : Nothing
** ===================================================================
*/

byte FSSH1_ParseCommand(const unsigned char *cmd, FSSH1_ConstStdIOType *io, FSSH1_ParseCommandCallback parseCallback);
/*
** ===================================================================
**     Method      :  FSSH1_ParseCommand (component FSShell)
**
**     Description :
**         Parses a shell command. It handles first the internal
**         commands and will call the provided callback.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmd             - Pointer to command string
**       * io              - Pointer to I/O callbacks
**         parseCallback   - callback which will be
**                           called to parse commands in the user
**                           application, or NULL if not used.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

FSSH1_ConstStdIOTypePtr FSSH1_GetStdio(void);
/*
** ===================================================================
**     Method      :  FSSH1_GetStdio (component FSShell)
**
**     Description :
**         Returns the default stdio channel. This method is only
**         available if a shell is enabled in the component properties.
**     Parameters  : None
**     Returns     :
**         ---             - Pointer to the stdio descriptor
** ===================================================================
*/

void FSSH1_SendNum32u(dword val, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendNum32u (component FSShell)
**
**     Description :
**         Sends a 32bit unsigned number to the given I/O
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - number to print
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_SendNum16u(word val, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendNum16u (component FSShell)
**
**     Description :
**         Sends a 16bit unsigned number to the given I/O
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - number to print
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_SendNum8u(byte val, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendNum8u (component FSShell)
**
**     Description :
**         Sends an 8bit unsigned number to the given I/O
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - number to print
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_SendNum8s(signed char val, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendNum8s (component FSShell)
**
**     Description :
**         Sends an 8bit signed number to the given I/O
**     Parameters  :
**         NAME            - DESCRIPTION
**         val             - number to print
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_Init(void);
/*
** ===================================================================
**     Method      :  FSSH1_Init (component FSShell)
**
**     Description :
**         Initializes the module, especially creates the mutex
**         semaphore if an RTOS is used.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_RequestSerial(void);
/*
** ===================================================================
**     Method      :  FSSH1_RequestSerial (component FSShell)
**
**     Description :
**         Used to get mutual access to the shell console. Only has an
**         effect if using an RTOS with semaphore for the console
**         access.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_ReleaseSerial(void);
/*
** ===================================================================
**     Method      :  FSSH1_ReleaseSerial (component FSShell)
**
**     Description :
**         Used to release mutual access to the shell console. Only has
**         an effect if using an RTOS with semaphore for the console
**         access.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_SendHelpStr(const byte *strCmd, const byte *strHelp, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendHelpStr (component FSShell)
**
**     Description :
**         Prints a string using an I/O function, formated for the
**         'help' command
**     Parameters  :
**         NAME            - DESCRIPTION
**       * strCmd          - Pointer to string of the command
**       * strHelp         - Pointer to help text string
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_SendStatusStr(const byte *strItem, const byte *strStatus, FSSH1_StdIO_OutErr_FctType io);
/*
** ===================================================================
**     Method      :  FSSH1_SendStatusStr (component FSShell)
**
**     Description :
**         Prints a status string using an I/O function, formated for
**         the 'status' command
**     Parameters  :
**         NAME            - DESCRIPTION
**       * strItem         - Pointer to string of the command
**       * strStatus       - Pointer to help text string
**         io              - I/O callbacks to be used for printing.
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_ReadChar(byte *c);
/*
** ===================================================================
**     Method      :  FSSH1_ReadChar (component FSShell)
**
**     Description :
**         Reads a character (blocking)
**     Parameters  :
**         NAME            - DESCRIPTION
**       * c               - Pointer to character to be used to store the
**                           result
**     Returns     : Nothing
** ===================================================================
*/

void FSSH1_SendChar(byte ch);
/*
** ===================================================================
**     Method      :  FSSH1_SendChar (component FSShell)
**
**     Description :
**         Sends a character (blocking)
**     Parameters  :
**         NAME            - DESCRIPTION
**         ch              - character to be sent
**     Returns     : Nothing
** ===================================================================
*/

bool FSSH1_KeyPressed(void);
/*
** ===================================================================
**     Method      :  FSSH1_KeyPressed (component FSShell)
**
**     Description :
**         Checks if a key has been pressed (a character is present in
**         the input buffer)
**     Parameters  : None
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

void FSSH1_Deinit(void);
/*
** ===================================================================
**     Method      :  FSSH1_Deinit (component FSShell)
**
**     Description :
**         De-Initializes the module, especially frees the mutex
**         semaphore if an RTOS is used.
**     Parameters  : None
**     Returns     : Nothing
** ===================================================================
*/

void AS1_OnBlockSent(LDD_TUserData *UserDataPtr);

void AS1_OnBlockReceived(LDD_TUserData *UserDataPtr);

void* FSSH1_GetSemaphore(void);
/*
** ===================================================================
**     Method      :  FSSH1_GetSemaphore (component FSShell)
**
**     Description :
**         Return the semaphore of the shell.
**     Parameters  : None
**     Returns     :
**         ---             - semaphore, or NULL if not used or not
**                           allocated.
** ===================================================================
*/

byte FSSH1_ReadAndParseLine(byte *cmdBuf, size_t cmdBufSize, FSSH1_ConstStdIOType *io, FSSH1_ParseCommandCallback parseCallback);
/*
** ===================================================================
**     Method      :  FSSH1_ReadAndParseLine (component FSShell)
**
**     Description :
**         Reads characters from the default input channel and appends
**         it to the buffer. Once a new line has been detected, the
**         line will be parsed.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * cmdBuf          - Pointer to buffer provided by the
**                           caller where to store the command to read
**                           in. Characters will be appended, so make
**                           sure string buffer is initialized with a
**                           zero byte at the beginning.
**         cmdBufSize      - Size of buffer
**       * io              - Pointer to I/O channels to be used
**         parseCallback   - callback provided by
**                           the user application to parse user commands.
**                           If not used, NULL can be passed.
**     Returns     :
**         ---             - Error code
** ===================================================================
*/

/* END FSSH1. */

#endif
/* ifndef __FSSH1_H */
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.0 [05.03]
**     for the Freescale Kinetis series of microcontrollers.
**
** ###################################################################
*/
